#pragma kernel RayTrace

#define MAX_RECURSION 15

#define MIN_T .001
#define MAX_T 1e5 

#define HALF_PI 1.57079632675
#define PI 3.1415926535
#define TWO_PI 6.283185307

#include "Hash.cginc"

#include "Ray.cginc"
#include "Hitables.cginc"

#include "Helper.cginc"

struct RayTracerLayout
{
	float4 accumColor;
};

RWStructuredBuffer<RayTracerLayout> rayTraceLayout;

float uFrame;
float uWidth;
float uHeight;
float uRatio;
float uSampleCount;

void Intersect(Ray r, inout HitRecord hitRecord)
{
	// reset hitrecord
	hitRecord = InitHitRecord(MIN_T, MAX_T);

	Sphere sphere_a = InitSphere(float3(0, 0, -1.), 1.);
	Sphere sphere_b = InitSphere(float3(0, -101., -1.), 100.);

	sphere_a.Intersect(r, hitRecord);
	sphere_b.Intersect(r, hitRecord);
}

float3 RenderScene(Ray r, inout float seed)
{
	float3 col = float3(1., 1., 1.);
	HitRecord hitRecord = InitHitRecord(MIN_T, MAX_T);

	for (int i = 0; i < MAX_RECURSION; i++)
	{
		Intersect(r, hitRecord);

		if (hitRecord.isHit)
		{
			col *= .5;

			float3 target = hitRecord.p + hitRecord.normal + RandomInUnitSphere(seed);
			
			// update ray with scatterd ray 
			r = InitRay(hitRecord.p, normalize(target - hitRecord.p));
		}
		else
		{
			float gradient = .5 * (r.direction.y + 1.);
			float3 sky = (1. - gradient) * float3(1., 1., 1.) + gradient * float3(.5, .7, 1.);

			return sky;
		}
	}

	return col;
}

[numthreads(8, 8, 8)]
void RayTrace(uint3 id : SV_DispatchThreadID)
{
	float t = uFrame * .1;
	float seed = float(BaseHash(uint2(id.xy))) / float(0xffffffffU) + t;

	// setup ray
	float2 randomSampleOffset = Hash2(seed);

	float2 uv = float2(
		((float)id.x + randomSampleOffset.x) / uWidth,
		((float)id.y + randomSampleOffset.y) / uHeight);
	float3 pixel = float3((uv - .5) * 2. * float2(uRatio, 1.), 0.);

	float3 origin = float3(0., 0., 1.);
	float3 direction = normalize(pixel - origin);
	
	Ray r = InitRay(origin, direction);

	// render
	float3 col = RenderScene(r, seed);

	// gamma correction 
	col = pow(max(col, 0.), .45);

	// output
	uint bufferIndex = id.x
		+ (id.y * (uint)uWidth)
		+ (id.z * (uint)uWidth * (uint)uHeight);
	rayTraceLayout[bufferIndex].accumColor = float4(col, 1.);
}

